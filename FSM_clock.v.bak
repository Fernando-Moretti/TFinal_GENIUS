module FSM_clock(
    reset,
    CLOCK_50,
    C025Hz,
    C05Hz,
    C1Hz,
    C2Hz
);
	input reset, CLOCK_50;
	output reg C025Hz, C05Hz, C1Hz, C2Hz;
    reg [27:0] counter25Hz, counter5Hz, counter1Hz, counter2Hz;
    initial C1Hz <= 0;
    initial counter1Hz <= 0;

    always @(posedge CLOCK_50 or posedge reset)
begin
       if(reset == 1'b1)
	begin
		C025Hz <= 1'b0;
		counter25Hz <= 28'h0000000;
	end
	else 
	begin
		counter25Hz <= counter25Hz + 1;
		if (C025Hz == 28'h5F5E100)
		begin
			counter25Hz <= 28'h0000000;
			C025Hz =~ counter25Hz;
		end
	end
end

//50*10^6 / 2*2 = 12.500.000
//C2Hz
always @(posedge CLOCK_50 or posedge reset)
begin
	if(reset == 1'b1)
	begin
		C2Hz <= 1'b0;
		counter2Hz <= 28'h0000000;
	end
	else 
	begin
		counter2Hz <= counter2Hz + 1;
		if (C2Hz == 28'h0BEBC1F)
		begin
			counter2Hz <= 28'h0000000;
			C2Hz <= ~counter2Hz;
		end
	end
end

//50*10^6 / 2*1 = 25.000.000
//C1Hz
always @(posedge CLOCK_50 or posedge reset)
begin
	if(reset == 1'b1)
	begin
		C1Hz <= 1'b0;
		counter1Hz <= 28'h0000000;
	end
	else 
	begin
		counter1Hz <= counter1Hz + 1;
		if (C1Hz == 28'h017D783F)
		begin
			counter1Hz <= 28'h0000000;
			C1Hz <= ~counter1Hz;
		end
	end
end

//50*10^6 / 2*0,5 = 50.000.000
//C05Hz
always @(posedge CLOCK_50 or posedge reset)
begin
	if(reset == 1'b1)
	begin
		C05Hz <= 1'b0;
		counter5Hz <= 28'h0000000;
	end
	else 
	begin
		counter5Hz <= counter5Hz + 1;
		if (C05Hz == 28'h2FAF080)
		begin
			counter5Hz <= 28'h0000000;
			C05Hz <= ~counter5Hz;
		end
	end
end
endmodule

